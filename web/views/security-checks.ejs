<!DOCTYPE html>

<html>

<head>
  <title>Security Check</title>

  <script src="https://www.gstatic.com/firebasejs/4.6.2/firebase.js"></script>
  <script src="https://www.gstatic.com/firebasejs/4.6.2/firebase-firestore.js"></script>

  <style>
    h3 {
      border-bottom: solid #AAA 1px;
      color: #666;
      font-size: 20pt;
      font-family: Menlo, monospace;
      margin: 0 8px;
      padding: 8px;
    }

    .security-check {
      color: #888;
      font-size: 14pt;
      font-family: Menlo, monospace;
      padding: 0;
      margin: 8px 0;
    }

    .security-check.pass {
      color: #27ae60;
    }

    .security-check.fail {
      color: #c0392b;
    }

    #security-checks {
      padding: 8px;
    }
  </style>

  <script>

    window.onload = function() {
      firebase.initializeApp(config);

      const Database = firebase.firestore();

      const waitForAuth = firebase.auth().signInWithEmailAndPassword(
        "<%= TEST_EMAIL %>",
        "<%= TEST_PASSWORD %>"
      );
// -----------------------------------------------------------------------------
//
// TESTING BEGIN
//
// -----------------------------------------------------------------------------

      runTest('[Accounts] Read access for user\'s own Accounts', function() {
        return waitForAuth
          .then(function(user) {
            return Database.collection('Accounts')
              .where('userRef.refID', '==', user.uid)
              .get();
          })
          .then(passIfNonEmptySnapshot);
      });

      runTest('[Accounts] No read access for Accounts of other users', function() {
        return waitForAuth
          .then(function(user) {
            return Database.collection('Accounts').get();
          })
          .then(failIfNoError)
          .catch(passIfPermissionDenied);
      });

      runTest('[JobRequests] No read access for any job requests', function() {
        return waitForAuth
          .then(function(user) {
            return Database.collection('JobRequests').limit(10).get();
          })
          .then(failIfNoError)
          .catch(passIfPermissionDenied);
      });

      runTest('[PlaidCredentials] No read access', function() {
        return waitForAuth
          .then(function(user) {
            return Database.collection('PlaidCredentials')
              .where('userRef.refID', '==', user.uid)
              .get();
          })
          .then(failIfNoError)
          .catch(passIfPermissionDenied);
      });

      runTest('[Transactions] Read access for user\'s own transactions', function() {
        return waitForAuth
          .then(function(user) {
            return Database.collection('Transactions')
              .where('userRef.refID', '==', user.uid)
              .get();
          })
          .then(passIfNonEmptySnapshot);
      });

      runTest('[Transactions] No read access for transactions of other users', function() {
        return waitForAuth
          .then(function(user) {
            return Database.collection('Transactions').get();
          })
          .then(failIfNoError)
          .catch(passIfPermissionDenied);
      });

      runTest('[UserInfo] Read access for user\'s own UserInfo', function() {
        return waitForAuth
          .then(function(user) {
            return Database.collection('UserInfo').doc(user.uid).get();
          })
          .then(passIfDocumentExists);
      });

      runTest('[UserInfo] No read access for UserInfo of other users', function() {
        return waitForAuth
          .then(function(user) {
            return Database.collection('UserInfo').get();
          })
          .then(failIfNoError)
          .catch(passIfPermissionDenied);
      });

      runTest('[UserMetrics] Read access for user\'s own UserMetrics', function() {
        return waitForAuth
          .then(function(user) {
            return Database.collection('UserMetrics').doc(user.uid).get();
          })
          .then(passIfDocumentExists);
      });

      runTest('[UserMetrics] No read access for UserMetrics of other users', function() {
        return waitForAuth
          .then(function(user) {
            return Database.collection('UserMetrics').get();
          })
          .then(failIfNoError)
          .catch(passIfPermissionDenied);
      });

// -----------------------------------------------------------------------------
//
// TESTING END
//
// -----------------------------------------------------------------------------

      Promise
        .all(tests.map(function (t) { return t.promise}))
        .then(function() {
          const status = document.getElementById('status');
          status.innerHTML = 'Security Checks (Done)';
        });
    };

    const config = {
      apiKey: "<%= WEB_API_KEY %>",
      authDomain: "<%= AUTH_DOMAIN %>",
      databaseURL: "<%= DB_URL %>",
      projectId: "<%= PROJECT_ID %>",
      storageBucket: "<%= STORAGE_BUCKET %>"
    };

    function waitFor(seconds) {
      return new Promise(function(resolve) {
        setTimeout(() => {
          resolve();
        }, seconds * 1000);
      });
    }

    let nextID = 1;
    const tests = [];

    function runTest(descriptor, cb) {
      const id = nextID++;
      const promise = cb()
        .then(function(didPass) {
          if (didPass) {
            success(id);
          } else {
            failure(id);
          }
        })
        .catch(function(error) {
          console.log('Error thrown for test: ' + id);
          console.error(error.toString());
          console.log('\n');
          failure(id);
        });
      const test = {
        descriptor: descriptor,
        id: id,
        promise: promise,
      };
      tests.push(test);
      renderTest(test);
    }

    function renderTest(test) {
      const p = document.createElement('p');
      const formatID = test.id < 10 ? `0${test.id}` : test.id.toString();
      p.id = 'test-' + test.id;
      p.className = 'security-check';
      p.innerHTML = '[?] ' + formatID + ') ' + test.descriptor;
      document.getElementById('security-checks').appendChild(p);
    }

    function success(id) {
      const test = tests.find(function(t) { return t.id === id; });
      const p = document.getElementById('test-' + id);
      const formatID = test.id < 10 ? `0${test.id}` : test.id.toString();

      p.className = 'security-check pass';
      p.innerHTML = '[o] ' + formatID + ') ' + test.descriptor;
    }

    function failure(id) {
      const test = tests.find(function(t) { return t.id === id; });
      const p = document.getElementById('test-' + id);
      const formatID = test.id < 10 ? `0${test.id}` : test.id.toString();

      p.className = 'security-check fail';
      p.innerHTML = '[x] ' + formatID + ') ' + test.descriptor;
    }

    function passIfPermissionDenied(error) {
      if (error.code === 'permission-denied') {
        return true;
      }
      throw error;
    }

    function failIfNoError() {
      return false;
    }

    function passIfDocumentExists(doc) {
      return doc.exists;
    }

    function passIfNonEmptySnapshot(snapshot) {
      return snapshot.docs.length > 0;
    }

  </script>
</head>

<body>
  <div>
    <h3 id="status">Security Checks (Running...)</h3>
    <div id="security-checks"></div>
  </div>
</body>

</head>
